call plug#begin('~/.vim/plugged')
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

Plug 'itchyny/lightline.vim'
Plug 'scrooloose/nerdtree'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'

Plug 'altercation/vim-colors-solarized'

Plug 'pangloss/vim-javascript'
Plug 'machakann/vim-highlightedyank'

Plug 'mileszs/ack.vim'

Plug 'w0rp/ale'
Plug 'csscomb/vim-csscomb'
call plug#end()

set nocompatible
set encoding=utf-8

" Bindings
let mapleader = "\<space>"

nmap j gj
nmap k gk

inoremap { {<CR>}<Esc>O

nmap <Leader>t :Files<CR>
nmap <Leader><Leader> :Buffers<CR>

nmap <Leader>f :Ack<Space>

nmap <Leader>\ :NERDTreeToggle<CR>

" Window movement
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Ack
let g:ackprg = 'ag --vimgrep'

" ALE
let g:ale_linters = {
\ 'javascript': ['eslint'],
\ }
let g:ale_fixers = {
\ 'javascript': ['eslint'],
\ }
let g:ale_sign_error = '!'
let g:ale_sign_warning = '¡'

" fzf
let g:fzf_layout = { 'up': '~20%' }

" Lightline
function! ShortGitBranchName()
  return strpart(fugitive#head(), 0, 30)
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓' : ''
endfunction

autocmd User ALELint call lightline#update()

set noshowmode
set laststatus=2
set cmdheight=1
let g:lightline = {
\ 'active': {
\   'left': [ [ 'mode', 'paste' ],
\           [ 'readonly', 'filename', 'modified', 'gitbranch' ] ],
\   'right': [ [ 'lineinfo' ], [ 'linter_warnings', 'linter_errors', 'linter_ok' ] ],
\ },
\ 'component_function': {
\   'gitbranch': 'ShortGitBranchName',
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ }

syntax enable

set background=dark
colorscheme solarized

if has('gui_running')
  set guifont=SF\ Mono:h14
else
  set guifont=SF\ Mono:h16
endif

" Whitespace
set autoindent
set smartindent
set backspace=indent,eol,start

set updatetime=250
set undofile
set clipboard=unnamed
set shortmess=I

" UI
set number
set relativenumber
set modelines=0
set scrolloff=5
set hidden
set ttyfast
set showcmd
set foldmethod=manual
set foldlevel=10

set splitbelow
set splitright

set wrap linebreak

" Searching
set ignorecase
set smartcase
set gdefault
set nohlsearch
set incsearch
set showmatch
set inccommand=nosplit
